{
    "project": {},
    "files": {
        "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js": {
            "name": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "modules": {
                "controllers": 1
            },
            "classes": {
                "capdfHydrogeochemCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\analytics\\defaultAnalyticCtrl.js": {
            "name": "..\\js\\assets\\controllers\\analytics\\defaultAnalyticCtrl.js",
            "modules": {},
            "classes": {
                "defaultAnalyticCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\analytics\\loadAnalyticCtrl.js": {
            "name": "..\\js\\assets\\controllers\\analytics\\loadAnalyticCtrl.js",
            "modules": {},
            "classes": {
                "loadAnalyticCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\analytics\\pressureDbCtrl.js": {
            "name": "..\\js\\assets\\controllers\\analytics\\pressureDbCtrl.js",
            "modules": {},
            "classes": {
                "pressureDbCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js": {
            "name": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "modules": {},
            "classes": {
                "loadFilterCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js": {
            "name": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "modules": {},
            "classes": {
                "googleMapCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\info\\collapseInfoPanelCtrl.js": {
            "name": "..\\js\\assets\\controllers\\info\\collapseInfoPanelCtrl.js",
            "modules": {},
            "classes": {
                "collapseInfoPanelCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\info\\infoPanelCtrl.js": {
            "name": "..\\js\\assets\\controllers\\info\\infoPanelCtrl.js",
            "modules": {},
            "classes": {
                "infoPanelCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js": {
            "name": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "modules": {},
            "classes": {
                "layerPanelCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js": {
            "name": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "modules": {},
            "classes": {
                "layerSearchCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js": {
            "name": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\framework\\angular\\angular-simple-logger.js": {
            "name": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\framework\\javeline\\javeline_xpath.js": {
            "name": "..\\js\\assets\\framework\\javeline\\javeline_xpath.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\framework\\slick\\slick.js": {
            "name": "..\\js\\assets\\framework\\slick\\slick.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js": {
            "name": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "modules": {
                "analytic": 1
            },
            "classes": {
                "D3PlotService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js": {
            "name": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "modules": {
                "http": 1
            },
            "classes": {
                "GetCSWRecordService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\http\\GetFilterParamService.js": {
            "name": "..\\js\\assets\\modules\\service\\http\\GetFilterParamService.js",
            "modules": {},
            "classes": {
                "GetFilterParamService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\http\\GetWFSRelatedService.js": {
            "name": "..\\js\\assets\\modules\\service\\http\\GetWFSRelatedService.js",
            "modules": {},
            "classes": {
                "GetWFSRelatedService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js": {
            "name": "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js",
            "modules": {},
            "classes": {
                "GetWMSRelatedService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\http\\StyleService.js": {
            "name": "..\\js\\assets\\modules\\service\\http\\StyleService.js",
            "modules": {},
            "classes": {
                "StyleService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "modules": {},
            "classes": {
                "NVCLService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "modules": {},
            "classes": {
                "QuerierPanelService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "modules": {},
            "classes": {
                "WFSService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "modules": {},
            "classes": {
                "CapdfWMSService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "modules": {},
            "classes": {
                "WMSService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_1_0_Service.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_1_0_Service.js",
            "modules": {},
            "classes": {
                "WMS_1_1_0_Service": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_3_0_Service.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_3_0_Service.js",
            "modules": {},
            "classes": {
                "WMS_1_3_0_Service": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderHandlerService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderHandlerService.js",
            "modules": {},
            "classes": {
                "RenderHandlerService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "modules": {},
            "classes": {
                "RenderStatusService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "modules": {
                "layer": 1
            },
            "classes": {
                "FilterStateService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js": {
            "name": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "modules": {},
            "classes": {
                "LayerManagerService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js": {
            "name": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "modules": {
                "map": 1
            },
            "classes": {
                "GoogleMapService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js": {
            "name": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "modules": {},
            "classes": {
                "PreviewMapService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js": {
            "name": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "modules": {
                "utility": 1
            },
            "classes": {
                "GMLParserService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js": {
            "name": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js": {
            "name": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "modules": {},
            "classes": {
                "SimpleXPathService": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "controllers": {
            "name": "controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "capdfHydrogeochemCtrl": 1,
                "defaultAnalyticCtrl": 1,
                "loadAnalyticCtrl": 1,
                "pressureDbCtrl": 1,
                "loadFilterCtrl": 1,
                "googleMapCtrl": 1,
                "collapseInfoPanelCtrl": 1,
                "infoPanelCtrl": 1,
                "layerPanelCtrl": 1,
                "layerSearchCtrl": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 1,
            "description": "capdfHydrogeochemCtrl class used for capdf hydrogeochem controller. This controller sits under loadAnalyticCtrl",
            "extends": "loadAnalyticCtrl",
            "params": [
                {
                    "name": "map-div-id",
                    "description": "the HTML id attribute of the div where the map will be placed"
                }
            ]
        },
        "analytic": {
            "name": "analytic",
            "submodules": {},
            "elements": {},
            "classes": {
                "D3PlotService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "line": 1,
            "description": "Service class related to handling all things related to making http cswrecords"
        },
        "http": {
            "name": "http",
            "submodules": {},
            "elements": {},
            "classes": {
                "GetCSWRecordService": 1,
                "GetFilterParamService": 1,
                "GetWFSRelatedService": 1,
                "GetWMSRelatedService": 1,
                "StyleService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\modules\\service\\http\\StyleService.js",
            "line": 1,
            "description": "Service class related to handling all things related to making http cswrecords"
        },
        "layer": {
            "name": "layer",
            "submodules": {},
            "elements": {},
            "classes": {
                "NVCLService": 1,
                "QuerierPanelService": 1,
                "FilterStateService": 1,
                "LayerManagerService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 1,
            "description": "FilterStateService user to store and extract the state of the filters and change the state of the filters"
        },
        "map": {
            "name": "map",
            "submodules": {},
            "elements": {},
            "classes": {
                "WFSService": 1,
                "CapdfWMSService": 1,
                "WMSService": 1,
                "WMS_1_1_0_Service": 1,
                "WMS_1_3_0_Service": 1,
                "RenderHandlerService": 1,
                "RenderStatusService": 1,
                "GoogleMapService": 1,
                "PreviewMapService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 1,
            "description": "Service class related to handling all things related to google map.",
            "itemtype": "event"
        },
        "utility": {
            "name": "utility",
            "submodules": {},
            "elements": {},
            "classes": {
                "GMLParserService": 1,
                "SimpleXPathService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 3,
            "description": "GMLParserService handles the parsing of GML documents"
        }
    },
    "classes": {
        "capdfHydrogeochemCtrl": {
            "name": "capdfHydrogeochemCtrl",
            "shortname": "capdfHydrogeochemCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 1,
            "description": "capdfHydrogeochemCtrl class used for capdf hydrogeochem controller. This controller sits under loadAnalyticCtrl",
            "extends": "loadAnalyticCtrl"
        },
        "defaultAnalyticCtrl": {
            "name": "defaultAnalyticCtrl",
            "shortname": "defaultAnalyticCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\analytics\\defaultAnalyticCtrl.js",
            "line": 1,
            "description": "defaultAnalyticCtrl class used to add analytic to the main map"
        },
        "loadAnalyticCtrl": {
            "name": "loadAnalyticCtrl",
            "shortname": "loadAnalyticCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\analytics\\loadAnalyticCtrl.js",
            "line": 1,
            "description": "loadAnalyticCtrl class used to draw the analytic panel for the layer"
        },
        "pressureDbCtrl": {
            "name": "pressureDbCtrl",
            "shortname": "pressureDbCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\analytics\\pressureDbCtrl.js",
            "line": 1,
            "description": "pressureDbCtrl class used for pressuredb-borehole controller. This controller sits under loadAnalyticCtrl",
            "extends": "loadAnalyticCtrl"
        },
        "loadFilterCtrl": {
            "name": "loadFilterCtrl",
            "shortname": "loadFilterCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 1,
            "description": "loadFilterCtrl class used to draw the filter panel for the layer reports"
        },
        "googleMapCtrl": {
            "name": "googleMapCtrl",
            "shortname": "googleMapCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "line": 1,
            "description": "googleMapCtrl class initialises the Google map used to display the main map"
        },
        "collapseInfoPanelCtrl": {
            "name": "collapseInfoPanelCtrl",
            "shortname": "collapseInfoPanelCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\info\\collapseInfoPanelCtrl.js",
            "line": 1,
            "description": "collapseInfoPanelCtrl class holds state and manipulates the preview map of the collapsible information panels"
        },
        "infoPanelCtrl": {
            "name": "infoPanelCtrl",
            "shortname": "infoPanelCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\info\\infoPanelCtrl.js",
            "line": 1,
            "description": "infoPanelCtrl class handles rendering of left hand side information panels"
        },
        "layerPanelCtrl": {
            "name": "layerPanelCtrl",
            "shortname": "layerPanelCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 1,
            "description": "layerPanelCtrl class handles rendering of left hand side layer reports"
        },
        "layerSearchCtrl": {
            "name": "layerSearchCtrl",
            "shortname": "layerSearchCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 1,
            "description": "layerSearchCtrl class handles searching layers based on user keywords"
        },
        "D3PlotService": {
            "name": "D3PlotService",
            "shortname": "D3PlotService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "analytic",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "line": 1,
            "description": "Service class related to handling all things related to making http cswrecords"
        },
        "GetCSWRecordService": {
            "name": "GetCSWRecordService",
            "shortname": "GetCSWRecordService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 1,
            "description": "Service class related to handling all things related to making http cswrecords"
        },
        "GetFilterParamService": {
            "name": "GetFilterParamService",
            "shortname": "GetFilterParamService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\http\\GetFilterParamService.js",
            "line": 1,
            "description": "Service class related to handling all things related to making http filter parameter option"
        },
        "GetWFSRelatedService": {
            "name": "GetWFSRelatedService",
            "shortname": "GetWFSRelatedService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\http\\GetWFSRelatedService.js",
            "line": 1,
            "description": "All things related to making http wfs request such as get feature"
        },
        "GetWMSRelatedService": {
            "name": "GetWMSRelatedService",
            "shortname": "GetWMSRelatedService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js",
            "line": 1,
            "description": "All things related to making http wms request such as get style, get legend etc"
        },
        "StyleService": {
            "name": "StyleService",
            "shortname": "StyleService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\http\\StyleService.js",
            "line": 1,
            "description": "Service class used to fetch style information for layer (and legend) styling"
        },
        "NVCLService": {
            "name": "NVCLService",
            "shortname": "NVCLService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layer",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 1,
            "description": "NVCLService handles extraction of information from NVCL service."
        },
        "QuerierPanelService": {
            "name": "QuerierPanelService",
            "shortname": "QuerierPanelService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layer",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 1,
            "description": "QuerierPanelService handles layer manipulation and extraction of information from the layer/csw records.\nTo use this class you must first call 'registerPanel'."
        },
        "WFSService": {
            "name": "WFSService",
            "shortname": "WFSService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 1,
            "description": "WFSService handles rendering of all wfs layers onto the map"
        },
        "CapdfWMSService": {
            "name": "CapdfWMSService",
            "shortname": "CapdfWMSService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "line": 1,
            "description": "CapdfWMSService handles rendering of all capdf layers onto the map. A custom wms renderer is require because capdf\ngets it layer name from user input parameter and not based on the default csw selection"
        },
        "WMSService": {
            "name": "WMSService",
            "shortname": "WMSService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 1,
            "description": "WMSService handles rendering of all wms layers onto the map"
        },
        "WMS_1_1_0_Service": {
            "name": "WMS_1_1_0_Service",
            "shortname": "WMS_1_1_0_Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_1_0_Service.js",
            "line": 1,
            "description": "WMSService handles rendering of all wms layers onto the map"
        },
        "WMS_1_3_0_Service": {
            "name": "WMS_1_3_0_Service",
            "shortname": "WMS_1_3_0_Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_3_0_Service.js",
            "line": 1,
            "description": "WMSService handles rendering of all wms layers onto the map"
        },
        "RenderHandlerService": {
            "name": "RenderHandlerService",
            "shortname": "RenderHandlerService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderHandlerService.js",
            "line": 1,
            "description": "Service class used for handling all layer rendering related methods"
        },
        "RenderStatusService": {
            "name": "RenderStatusService",
            "shortname": "RenderStatusService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 1,
            "description": "Service class used for managing and tracking the status of the layer rendering"
        },
        "FilterStateService": {
            "name": "FilterStateService",
            "shortname": "FilterStateService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layer",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 1,
            "description": "FilterStateService user to store and extract the state of the filters and change the state of the filters"
        },
        "LayerManagerService": {
            "name": "LayerManagerService",
            "shortname": "LayerManagerService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "layer",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 1,
            "description": "LayerManagerService handles layer manipulation and extraction of information from the layer/csw records"
        },
        "GoogleMapService": {
            "name": "GoogleMapService",
            "shortname": "GoogleMapService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 1,
            "description": "Service class related to handling all things related to google map."
        },
        "PreviewMapService": {
            "name": "PreviewMapService",
            "shortname": "PreviewMapService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "map",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 1,
            "description": "Service class for creating and manipulating the layer report preview map"
        },
        "GMLParserService": {
            "name": "GMLParserService",
            "shortname": "GMLParserService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utility",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 1,
            "description": "GMLParserService handles the parsing of GML documents"
        },
        "SimpleXPathService": {
            "name": "SimpleXPathService",
            "shortname": "SimpleXPathService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utility",
            "namespace": "",
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 3,
            "description": "SimpleXPathService handles xml file manipulation."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 25,
            "description": "Sets the value displayed in the parameter dropdown selector",
            "itemtype": "method",
            "name": "setSelectedPoi",
            "params": [
                {
                    "name": "label",
                    "description": "string to be displayed in dropdown"
                },
                {
                    "name": "value",
                    "description": "parameter corresponding to the label string"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 38,
            "description": "Sets the value displayed in the group dropdown selector for map filter",
            "itemtype": "method",
            "name": "setSelectedGoi",
            "params": [
                {
                    "name": "label",
                    "description": "string to be displayed in dropdown"
                },
                {
                    "name": "value",
                    "description": "corresponding service name for the label string"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 51,
            "description": "Sets the value displayed in the group dropdown selector for graph",
            "itemtype": "method",
            "name": "setSelectedGraphGoi",
            "params": [
                {
                    "name": "label",
                    "description": "string to be displayed in dropdown"
                },
                {
                    "name": "value",
                    "description": "corresponding service name for the label string"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 64,
            "description": "Sets the value displayed in the x-axis dropdown selector",
            "itemtype": "method",
            "name": "setSelectedXAxis",
            "params": [
                {
                    "name": "label",
                    "description": "string to be displayed in dropdown"
                },
                {
                    "name": "value",
                    "description": "x-axis name used in plotting process"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 77,
            "description": "Sets the value displayed in the y-axis dropdown selector",
            "itemtype": "method",
            "name": "setSelectedYAxis",
            "params": [
                {
                    "name": "label",
                    "description": "string to be displayed in dropdown"
                },
                {
                    "name": "value",
                    "description": "y-axis name used in plotting process"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 104,
            "description": "Adds layer to the map",
            "itemtype": "method",
            "name": "addLayer",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 113,
            "description": "register event when user start to select data on map",
            "itemtype": "method",
            "name": "onSelectDataStart",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 121,
            "description": "register event when user selection ends",
            "itemtype": "method",
            "name": "onSelectDataEnd",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 130,
            "description": "retrieve grouping for dropdown",
            "itemtype": "method",
            "name": "getGOIs",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 146,
            "description": "get parameter based on group",
            "itemtype": "method",
            "name": "getPOIs",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 163,
            "description": "Cosmetically change the label display on the drop down",
            "itemtype": "method",
            "name": "augmentLabel",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 177,
            "description": "Render the slider widget",
            "itemtype": "method",
            "name": "renderSlider",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 210,
            "description": "Run the color code request",
            "itemtype": "method",
            "name": "renderColorCode",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 224,
            "description": "Request to start the drawing process for bounding box selection",
            "itemtype": "method",
            "name": "selectBound",
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 232,
            "description": "Performs a box plot in the panel",
            "itemtype": "method",
            "name": "plotBox",
            "params": [
                {
                    "name": "group",
                    "description": "feature object to be plotted"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\capdfHydrogeochemCtrl.js",
            "line": 267,
            "description": "Performs a scatter plot in the panel",
            "itemtype": "method",
            "name": "plotScatter",
            "params": [
                {
                    "name": "group",
                    "description": "feature object to be plotted"
                }
            ],
            "class": "capdfHydrogeochemCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\loadAnalyticCtrl.js",
            "line": 9,
            "description": "A function which returns the URL used to load the analytic panel",
            "itemtype": "method",
            "name": "getAnalyticPanel",
            "class": "loadAnalyticCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\analytics\\pressureDbCtrl.js",
            "line": 35,
            "description": "Sets the value displayed in the property dropdown selector and updates '$scope.param'\nto trigger the slider below",
            "itemtype": "method",
            "name": "setPropSelectList",
            "params": [
                {
                    "name": "val",
                    "description": "value to be set in dropdown selector"
                }
            ],
            "class": "pressureDbCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 40,
            "description": "Moves this layer to the front if obscure",
            "itemtype": "method",
            "name": "moveLayerToFront",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 49,
            "description": "Returns true if this layer is in front of all other layers",
            "itemtype": "method",
            "name": "isLayerAtFront",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 58,
            "description": "Returns true if and only if the current layer is WMS",
            "itemtype": "method",
            "name": "isWMSLayer",
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 66,
            "description": "Returns true is the layer is active",
            "itemtype": "method",
            "name": "isLayerActive",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 76,
            "description": "Sets the value displayed in the optional dropdown selector",
            "itemtype": "method",
            "name": "setOptSelectList",
            "params": [
                {
                    "name": "val",
                    "description": "value to be set in dropdown selector"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 86,
            "description": "Sets the value displayed in the current mandatory dropdown selector",
            "itemtype": "method",
            "name": "setMandSelectList",
            "params": [
                {
                    "name": "val",
                    "description": "value to be seen in dropdown selector"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 96,
            "description": "Forces a select operation on any one of the mandatory dropdown selectors",
            "itemtype": "method",
            "name": "selectMandDropdownOpt",
            "params": [
                {
                    "name": "dropdownLabel",
                    "description": "label of the mandatory dropdown selector"
                },
                {
                    "name": "val",
                    "description": "the value of the selection option (not the visible label)"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 129,
            "description": "Forces a select operation on any one of the optional dropdown selectors",
            "itemtype": "method",
            "name": "selectOptDropdownOpt",
            "params": [
                {
                    "name": "dropdownLabel",
                    "description": "label of the optional dropdown selector"
                },
                {
                    "name": "val",
                    "description": "the value of the selection option (not the visible label)"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 163,
            "description": "Sets the value displayed in the remote dropdown selector",
            "itemtype": "method",
            "name": "setDropdownRemote",
            "params": [
                {
                    "name": "val",
                    "description": "value to be set in dropdown selector"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 173,
            "description": "Assembles a list of providers, which will be displayed in the panel",
            "itemtype": "method",
            "name": "getProvider",
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 200,
            "description": "A function used to add a layer to the main map",
            "itemtype": "method",
            "name": "addLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 223,
            "description": "Adds a new filter to be displayed in the panel",
            "itemtype": "method",
            "name": "addFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "filter object to be added to the panel"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 248,
            "description": "Removes all filters displayed in panel",
            "itemtype": "method",
            "name": "clearFilter",
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 256,
            "description": "Returns the first key in options object",
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "options",
                    "description": "options object"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\filters\\loadFilterCtrl.js",
            "line": 266,
            "description": "Uses the input filter object to set the filter values",
            "itemtype": "method",
            "name": "updateFilter",
            "params": [
                {
                    "name": "filterObj",
                    "description": "filter object i.e. , optionalFilters: {Obj} }",
                    "type": "MandatoryFilters: Obj"
                }
            ],
            "class": "loadFilterCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "line": 89,
            "description": "Turn on/off drawing of box on map for zooming/panning to an area",
            "itemtype": "method",
            "name": "toggleZoomDraw",
            "class": "googleMapCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "line": 102,
            "description": "Alternately displays or hides the permanent link\nIf displaying it generates a new permanent link",
            "itemtype": "method",
            "name": "togglePermalink",
            "class": "googleMapCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "line": 141,
            "description": "Copies the generated URL to the local computer's clipboard for use by a paste operation",
            "itemtype": "method",
            "name": "copyLinkToClipboard",
            "class": "googleMapCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\googlemap\\googleMapCtrl.js",
            "line": 159,
            "description": "Process the state parameter to the website's URL, panning,zooming and adding layers and markers as required etc.",
            "itemtype": "method",
            "name": "processState",
            "class": "googleMapCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\info\\collapseInfoPanelCtrl.js",
            "line": 11,
            "description": "Changes a rectangle in the preview map to a special highlighted colour",
            "itemtype": "method",
            "name": "highlightOnPreviewMap",
            "params": [
                {
                    "name": "reportName",
                    "description": "Name of the reports displayed in the preview map"
                },
                {
                    "name": "adminArea",
                    "description": "Name of the region where the reports apply"
                }
            ],
            "class": "collapseInfoPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\info\\collapseInfoPanelCtrl.js",
            "line": 22,
            "description": "Returns a rectangle on the preview map to the default non-highlighted colour",
            "itemtype": "method",
            "name": "lowlightOnPreviewMap",
            "params": [
                {
                    "name": "reportName",
                    "description": "Name of the reports displayed in the preview map"
                },
                {
                    "name": "adminArea",
                    "description": "Name of the region where the reports apply"
                }
            ],
            "class": "collapseInfoPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 29,
            "description": "Returns true if this layer has anything to display",
            "itemtype": "method",
            "name": "canDisplay",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 40,
            "description": "Returns true if there have been recent service disruptions in this layer",
            "itemtype": "method",
            "name": "hasWarningMessage",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "return": {
                "description": "true if there have been recent service disruptions"
            },
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 50,
            "description": "Returns the list of providers whose service has been disrupted",
            "itemtype": "method",
            "name": "getDisruptedProviders",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "return": {
                "description": "string, comma separated list of providers whose service has been disrupted"
            },
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 85,
            "description": "remove the cswLayer",
            "itemtype": "method",
            "name": "removeLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer to remove"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 94,
            "itemtype": "method",
            "name": "getCswRecords",
            "return": {
                "description": "cswRecords - csw records that match the search, or all known layer csw records if search is empty"
            },
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 104,
            "itemtype": "method",
            "name": "togglePanels",
            "params": [
                {
                    "name": "panelType",
                    "description": "type of panel"
                },
                {
                    "name": "group",
                    "description": "group"
                },
                {
                    "name": "layer",
                    "description": "layer"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 157,
            "itemtype": "method",
            "name": "toggleLayers",
            "params": [
                {
                    "name": "group",
                    "description": "group"
                },
                {
                    "name": "cswRecordId",
                    "description": "record identifier"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 177,
            "description": "Used to register the last group in the panel\nThis helps us know when the panel filter initialisation is complete",
            "itemtype": "method",
            "name": "lastGroupFn",
            "params": [
                {
                    "name": "last",
                    "description": "last iteration of loop flag ($last) for all groups"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerPanelCtrl.js",
            "line": 187,
            "description": "Used to register the layer id of the last layer in the panel\nThis enables us to know when panel filter initialisation is complete",
            "itemtype": "method",
            "name": "lastLayerFn",
            "params": [
                {
                    "name": "last",
                    "description": "last iteration of loop flag ($last) for layers of a group"
                },
                {
                    "name": "layer",
                    "description": "relevant layer"
                }
            ],
            "class": "layerPanelCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 10,
            "description": "This is triggered after the user types inside the search text field and press enter.\nIt will search through all known layers CSW records name and description that matches the keywords.\nIt will then show the layer panel with search results or all layers if no keyword is entered.",
            "itemtype": "method",
            "name": "submit",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 22,
            "description": "This will clear all search selection",
            "itemtype": "method",
            "name": "submit",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 34,
            "description": "This will filter data record",
            "itemtype": "method",
            "name": "filterDataRecord",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 44,
            "description": "This will filter image record",
            "itemtype": "method",
            "name": "filterImageRecord",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 54,
            "description": "This will filter active record",
            "itemtype": "method",
            "name": "filterActiveRecord",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\layer\\layerSearchCtrl.js",
            "line": 64,
            "description": "This will filter active record",
            "itemtype": "method",
            "name": "filterActiveRecord",
            "class": "layerSearchCtrl",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 28,
            "description": "Used to initialise the controller.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "xmlPanelId",
                    "description": "the id of the <div> where the XML accordion tree is to be displayed"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 40,
            "itemtype": "method",
            "name": "resetTree",
            "params": [
                {
                    "name": "panelStatus",
                    "description": "status of panel, if closed is false, if open is true"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 52,
            "description": "Used to display XML in tree form in the panel, calls parse() function\nPassed to 'QuerierPanelService' as a parameter, then called by 'QuerierPanelService'\nIt is possible for node to be passed in as a feature node or the whole collection. We attempt to be smart\nby assuming it is a feature collection and if it fails, we assume it to be a feature node.",
            "itemtype": "method",
            "name": "addPanelTree",
            "params": [
                {
                    "name": "xmlString",
                    "description": "string which will be displayed"
                },
                {
                    "name": "displayName",
                    "description": "name of layer or feature, to be used only if no suitable name is found within XML string"
                },
                {
                    "name": "appendFlag",
                    "description": "will append the new tree to the current tree(s) on panel or clear the panel and add a new tree"
                }
            ],
            "return": {
                "description": "boolean value, true if the panel should be opened because there is something to display"
            },
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 150,
            "description": "This is called from the Angular HTML template. It parses the XML tree,\ncreating a JSON representation which is passed in to create a tree view\nvia the \"$scope.JSONTreeStruct[]\" array",
            "itemtype": "method",
            "name": "parseTree",
            "params": [
                {
                    "name": "name",
                    "description": "- a label displayed at the top of the tree"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 215,
            "description": "Used to open and close the panel. \nPassed to 'QuerierPanelService' as a parameter, then called by 'QuerierPanelService'",
            "itemtype": "method",
            "name": "openPanel",
            "params": [
                {
                    "name": "ctrlBool",
                    "description": "if true panel will open, if false panel will close"
                },
                {
                    "name": "useApply",
                    "description": "will call $apply() on $parent object if set to true"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 229,
            "description": "Sets the images for the carousel",
            "itemtype": "method",
            "name": "setCarouselImages",
            "params": [
                {
                    "name": "imageList",
                    "description": ""
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 249,
            "description": "Resets the carousel when the panel closes",
            "itemtype": "method",
            "name": "resetCarousel",
            "params": [
                {
                    "name": "panelStatus",
                    "description": "open/closed status of the querier panel"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\controllers\\querier\\querierPanelCtrl.js",
            "line": 261,
            "description": "Controls the display of the spinner to let user know the carousel is loading",
            "itemtype": "method",
            "name": "setCarouselBusy",
            "params": [
                {
                    "name": "busyFlag",
                    "description": "set to true to make the spinner display, else false ot make it go away"
                }
            ],
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 141,
            "description": "This is the web browser implementation of `debug()`.\n\nExpose `debug()` as the module.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 158,
            "description": "Colors.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 171,
            "description": "Currently only WebKit-based Web Inspectors, Firefox >= v31,\nand the Firebug extension (any Firefox version) are known\nto support \"%c\" CSS customizations.\n\nTODO: add a `localStorage` variable to explicitly enable/disable colors",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 189,
            "description": "Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 198,
            "description": "Colorize log arguments if enabled.",
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 239,
            "description": "Invokes `console.log()` when available.\nNo-op when `console.log` is not a \"function\".",
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 254,
            "description": "Save `namespaces`.",
            "params": [
                {
                    "name": "namespaces",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 271,
            "description": "Load `namespaces`.",
            "return": {
                "description": "returns the previously persisted debug modes",
                "type": "String"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 286,
            "description": "Enable namespaces listed in `localStorage.debug` initially.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 292,
            "description": "Localstorage attempts to return the localstorage.\n\nThis is necessary because safari throws\nwhen a user disables cookies/localstorage\nand you attempt to access it.",
            "return": {
                "description": "",
                "type": "LocalStorage"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 311,
            "description": "This is the common logic for both the Node.js and web browser\nimplementations of `debug()`.\n\nExpose `debug()` as the module.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 325,
            "description": "The currently active debug mode names, and names to skip.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 332,
            "description": "Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\nValid key names are a single, lowercased letter, i.e. \"n\".",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 340,
            "description": "Previously assigned color.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 346,
            "description": "Previous log timestamp.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 352,
            "description": "Select a color.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 363,
            "description": "Create a debugger with the given `namespace`.",
            "params": [
                {
                    "name": "namespace",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 437,
            "description": "Enables a debug mode by namespaces. This can include modes\nseparated by a colon and wildcards.",
            "params": [
                {
                    "name": "namespaces",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 462,
            "description": "Disable debug output.",
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 472,
            "description": "Returns true if the given mode name is enabled, false otherwise.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 495,
            "description": "Coerce `val`.",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 509,
            "description": "Helpers.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 519,
            "description": "Parse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "api": "public",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 540,
            "description": "Parse the given `str` and return milliseconds.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 593,
            "description": "Short format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 609,
            "description": "Long format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\angular\\angular-simple-logger.js",
            "line": 625,
            "description": "Pluralization helper.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\javeline\\javeline_xpath.js",
            "line": 1,
            "description": "Workaround for the lack of having an XPath parser on safari\nIt works on Safari's document and XMLDocument object.\n\nIt doesn't support the full XPath spec, but just enought for\nthe skinning engine which needs XPath on the HTML document.\n\nSupports:\n- Compilation of xpath statements\n- Caching of XPath statements",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\slick\\slick.js",
            "line": 1672,
            "description": "try to load the image 3 times,\nleave a slight delay so we don't get\nservers blocking the request.",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\framework\\slick\\slick.js",
            "line": 1999,
            "description": "accepts arguments in format of:\n\n - for changing a single option's value:\n    .slick(\"setOption\", option, value, refresh )\n\n - for changing a set of responsive options:\n    .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n\n - for updating multiple values at once (not responsive)\n    .slick(\"setOption\", { 'option': value, ... }, refresh )",
            "class": "D3PlotService",
            "module": "controllers"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "line": 9,
            "description": "Plot a scatter plot graph into the divId selected",
            "itemtype": "method",
            "name": "plotScatter",
            "params": [
                {
                    "name": "data",
                    "description": "- the data for plotting in an array"
                },
                {
                    "name": "divId",
                    "description": "- the id of the div for rendering the graph"
                },
                {
                    "name": "height",
                    "description": "- the height of the graph"
                },
                {
                    "name": "xaxis",
                    "description": "- x-axis"
                },
                {
                    "name": "yaxis",
                    "description": "- y-axis"
                }
            ],
            "class": "D3PlotService",
            "module": "analytic"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "line": 150,
            "description": "Plot a boxPlot graph into the divId selected",
            "itemtype": "method",
            "name": "plotBox",
            "params": [
                {
                    "name": "data",
                    "description": "- the data for plotting in an array"
                },
                {
                    "name": "id",
                    "description": "- the id of the div for rendering the graph"
                },
                {
                    "name": "height",
                    "description": "- the height of the graph"
                },
                {
                    "name": "x",
                    "description": "- x-axis"
                },
                {
                    "name": "y",
                    "description": "- y-axis"
                }
            ],
            "class": "D3PlotService",
            "module": "analytic"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js",
            "line": 358,
            "description": "Clear the div of any graph plotting",
            "params": [
                {
                    "name": "-",
                    "description": "divId the id of the div to remove the graph."
                }
            ],
            "class": "D3PlotService",
            "module": "analytic"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 13,
            "description": "Retrieve knownlayer csw records async",
            "itemtype": "method",
            "name": "getCSWKnownLayers",
            "return": {
                "description": "promise - a promise of the csw records when it has complete"
            },
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 40,
            "description": "Search knownlayer csw records name and description with supplied keywords",
            "itemtype": "method",
            "name": "searchLayers",
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 76,
            "description": "Filter out all WMS layer",
            "itemtype": "method",
            "name": "filterImageRecord",
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 112,
            "description": "Filter out all WMS layer",
            "itemtype": "method",
            "name": "filterDataRecord",
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 150,
            "description": "Filter out all Active layer",
            "itemtype": "method",
            "name": "filterActiveRecord",
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 172,
            "description": "Filter out all analytic layer",
            "itemtype": "method",
            "name": "filterAnalyticRecord",
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetCSWRecordService.js",
            "line": 195,
            "description": "Return csw records to be displayed in the layer panel.",
            "itemtype": "method",
            "name": "getSearchedLayers",
            "return": {
                "description": "csw records that match the search, or all known layer csw records if search is empty"
            },
            "class": "GetCSWRecordService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetFilterParamService.js",
            "line": 26,
            "description": "Retrieve knownlayer csw records async",
            "itemtype": "method",
            "name": "getParam",
            "return": {
                "description": "promise - a promise of the dropdown filter array options"
            },
            "class": "GetFilterParamService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetWFSRelatedService.js",
            "line": 9,
            "description": "Make a get wfs request",
            "itemtype": "method",
            "name": "getFeature",
            "params": [
                {
                    "name": "proxyUrl",
                    "description": "- The URL of the feature service"
                },
                {
                    "name": "onlineResource",
                    "description": "- onlineResource of the wfs"
                },
                {
                    "name": "param",
                    "description": "- addtional parameter"
                }
            ],
            "return": {
                "description": "promise - a promise containing the features for the layer"
            },
            "class": "GetWFSRelatedService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js",
            "line": 39,
            "description": "Get the wms style url if proxyStyleUrl is valid",
            "itemtype": "method",
            "name": "getWMSStyleUrl",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to retrieve the sld for if proxyStyleUrl is defined"
                },
                {
                    "name": "onlineResource",
                    "description": "- the onlineResource of the layer we are rendering"
                },
                {
                    "name": "param",
                    "description": "- OPTIONAL - parameter to be passed into retrieving the SLD.Used in capdf"
                }
            ],
            "return": {
                "description": "url - getUrl to retrieve sld"
            },
            "class": "GetWMSRelatedService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js",
            "line": 58,
            "description": "Get the wms style if proxyStyleUrl is valid",
            "itemtype": "method",
            "name": "getWMSStyle",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to retrieve the sld for if proxyStyleUrl is defined"
                },
                {
                    "name": "onlineResource",
                    "description": "- the onlineResource of the layer we are rendering"
                },
                {
                    "name": "param",
                    "description": "- OPTIONAL - parameter to be passed into retrieving the SLD.Used in capdf"
                }
            ],
            "return": {
                "description": "promise - a promise containing the sld for the layer"
            },
            "class": "GetWMSRelatedService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\GetWMSRelatedService.js",
            "line": 96,
            "itemtype": "method",
            "name": "getWMSMarkerInfo",
            "params": [
                {
                    "name": "ptLatLng",
                    "description": "Lat Lng object of the clicked/touched on point on map"
                },
                {
                    "name": "pixel",
                    "description": "These are window pixel coords of the clicked/touched point on the map. (0,0) is top LH corner. Not Google Map pixel coords."
                },
                {
                    "name": "serviceInfo",
                    "description": "CSW service information object"
                },
                {
                    "name": "style",
                    "description": "OPTIONAL style to use when making the GetFeatureInfo request"
                }
            ],
            "class": "GetWMSRelatedService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\http\\StyleService.js",
            "line": 9,
            "itemtype": "method",
            "name": "getLegendStyle",
            "return": {
                "description": "returns a promise object which can be processed using a .then() function"
            },
            "class": "StyleService",
            "module": "http"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 11,
            "description": "Decomposes a 'normal' URL in the form http://url.com/long/path/name to just its prefix + hostname http://url.com",
            "itemtype": "method",
            "name": "getBaseUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The url to decompose"
                }
            ],
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 22,
            "description": "Given a online reseource URL it returns its NVCL URL",
            "itemtype": "method",
            "name": "getNVCLDataServiceUrl",
            "params": [
                {
                    "name": "url",
                    "description": "online resource URL"
                }
            ],
            "return": {
                "description": "an NVCL URL"
            },
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 39,
            "description": "Returns a list of logids, used when referring to the core sample for various services",
            "itemtype": "method",
            "name": "getNVCLLogs",
            "params": [
                {
                    "name": "serviceURL",
                    "description": "online resource URL"
                }
            ],
            "datasetid": "dataset id for core sample",
            "return": {
                "description": "list of logids"
            },
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 56,
            "description": "Returns URL of image carousel",
            "itemtype": "method",
            "name": "getImageCarouselURL",
            "params": [
                {
                    "name": "serviceUrl",
                    "description": "online resource URL"
                },
                {
                    "name": "logID",
                    "description": "log identifier"
                },
                {
                    "name": "sampleNo",
                    "description": "sample number"
                }
            ],
            "return": {
                "description": "HTML carousel URL"
            },
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 68,
            "description": "Returns URL of image thumbnail",
            "itemtype": "method",
            "name": "getDisplayTrayThumbURL",
            "params": [
                {
                    "name": "dataServiceUrl",
                    "description": "online resource URL"
                },
                {
                    "name": "logID",
                    "description": "log identifier"
                }
            ],
            "return": {
                "description": "HTML thumbnail URL"
            },
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 81,
            "description": "Calls up NVCL services to get the depths for each core tray image",
            "itemtype": "method",
            "name": "getImageTrayDepth",
            "params": [
                {
                    "name": "dataServiceUrl",
                    "description": "online resource URL"
                },
                {
                    "name": "logID",
                    "description": "log identifier"
                }
            ],
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js",
            "line": 96,
            "description": "Return some HTML which displays a carousel of core images",
            "itemtype": "method",
            "name": "getCarouselHTML",
            "params": [
                {
                    "name": "serviceUrl",
                    "description": "online resource URL"
                },
                {
                    "name": "typeName",
                    "description": "data type name"
                },
                {
                    "name": "featureId",
                    "description": "id for requested feature"
                }
            ],
            "class": "NVCLService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 13,
            "itemtype": "method",
            "name": "registerMap",
            "params": [
                {
                    "name": "map",
                    "description": "Google map to be registered"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 89,
            "description": "Returns true iff all elements in array are true else false",
            "itemtype": "method",
            "name": "lastOne",
            "params": [
                {
                    "name": "doneList",
                    "description": "boolean array"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 103,
            "description": "Register the panel by passing in some querier panel controller functions.",
            "itemtype": "method",
            "name": "registerPanel",
            "params": [
                {
                    "name": "openPanelFn",
                    "description": "used to open and close the panel\n   function openPanelFn(ctrlBool, useApply)\n   'ctrlBool' if true panel will open, if false panel will close\n   'useApply' boolean parameter. Set to true and 'openPanelFn()' will use the '$apply()' method to make the panel open. Set to false and '$apply()' will not be used. \n   It is recommended to set to false in places where you would get an '$digest already in progress' error, e.g. calling 'setPanel(true)' from within a 'then()' function"
                },
                {
                    "name": "setXMLFn",
                    "description": "function used to display XML data in the panel\n   function setXMLFn(xmlString, layerName, prependStr) return boolean\n   'xmlString' is a string of xml to be displayed\n   'layerName' layer display name\n   'prependStr' string to prepend to layer display name\n   returns true is there is data to display"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 126,
            "description": "Opens the query panel",
            "itemtype": "method",
            "name": "openPanel",
            "params": [
                {
                    "name": "useApply",
                    "description": "boolean parameter. Set to true and 'openPanel()' will use the '$apply()' method to make the panel open. Set to false and '$apply()' will not be used. \nIt is recommended to set to false in places where you would get an '$digest already in progress' error, e.g. calling 'setPanel(true)' from within a 'then()' function"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 138,
            "description": "Closes the query panel",
            "itemtype": "method",
            "name": "closePanel",
            "params": [
                {
                    "name": "useApply",
                    "description": "boolean parameter. Set to true and 'closePanel()' will use the '$apply()' method to make the panel open. Set to false and '$apply()' will not be used. \nIt is recommended to set to false in places where you would get an '$digest already in progress' error, e.g. calling 'setPanel(true)' from within a 'then()' function"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 154,
            "description": "Set the XML string to be displayed on the panel",
            "itemtype": "method",
            "name": "setPanelNode",
            "params": [
                {
                    "name": "xmlString",
                    "description": "XML string to be displayed"
                },
                {
                    "name": "displayName",
                    "description": "name of layer or feature, to be used if no suitable name is found within XML string"
                },
                {
                    "name": "prependStr",
                    "description": "string to prepend to display name e.g. 'WMS', 'WFS'. Used for display purposes"
                },
                {
                    "name": "appendFlag",
                    "description": "will append the new tree to the current tree(s) on panel or clear the panel and add a new tree"
                }
            ],
            "return": {
                "description": "boolean value, true if the panel should be opened because there is something to display"
            },
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 168,
            "description": "Disable click events on the map layer to prevent opening up of the query panel\nThis should be called after the layer has been deleted from the map",
            "itemtype": "method",
            "name": "deregisterLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "CSW object of the layer that has been deleted from the map"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\queriers\\QuerierPanelService.js",
            "line": 190,
            "description": "Registers the mapEventListener object and onlineResource object\nThis should be called after the 'mousedown' event is registered with the google map.",
            "itemtype": "method",
            "name": "registerLayer",
            "params": [
                {
                    "name": "map",
                    "description": "Google Map that layer is attached to"
                },
                {
                    "name": "onlineResource",
                    "description": "object representing the WMS resource displayed as a map layer"
                },
                {
                    "name": "bbox",
                    "description": "bounding box that contains this layer"
                },
                {
                    "name": "style",
                    "description": "layer's style"
                }
            ],
            "class": "QuerierPanelService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 10,
            "description": "Render a point data to the map",
            "itemtype": "method",
            "name": "renderPoint",
            "params": [
                {
                    "name": "point",
                    "description": "- the point to render"
                },
                {
                    "name": "map",
                    "description": "- The map where the point is to be rendered"
                }
            ],
            "class": "WFSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 45,
            "description": "Render a LINESTRING data to the map",
            "itemtype": "method",
            "name": "renderLineString",
            "params": [
                {
                    "name": "linestring",
                    "description": "- the linestring to render"
                },
                {
                    "name": "map",
                    "description": "- The map where the point is to be rendered"
                }
            ],
            "class": "WFSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 55,
            "description": "Render a POLYGON data to the map",
            "itemtype": "method",
            "name": "renderPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "- the polygon to render"
                },
                {
                    "name": "map",
                    "description": "- The map where the point is to be rendered"
                }
            ],
            "class": "WFSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 65,
            "description": "Method to decide how the wfs layer should be rendered and add the wfs to the map",
            "itemtype": "method",
            "name": "renderLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "- The layer containing the wfs to be rendered"
                }
            ],
            "class": "WFSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wfs\\WFSService.js",
            "line": 119,
            "description": "Method to decide how the wfs resource should be rendered and add the wfs to the map",
            "itemtype": "method",
            "name": "renderResource",
            "params": [
                {
                    "name": "resource",
                    "description": "- The resource containing the wfs to be rendered"
                }
            ],
            "class": "WFSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "line": 13,
            "description": "Generate wms 1.1.1 google.maps.ImageMapType layer",
            "itemtype": "method",
            "name": "generateWMS_1_1_1_Layer",
            "params": [
                {
                    "name": "onlineResource",
                    "description": "- WMS online resource"
                },
                {
                    "name": "style",
                    "description": "- sld if defined else default server sld will be used"
                }
            ],
            "return": {
                "description": "ImageMapType - google.maps.ImageMapType"
            },
            "class": "CapdfWMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "line": 68,
            "description": "Generate wms 1.3 google.maps.ImageMapType layer",
            "itemtype": "method",
            "name": "generateWMS_1_3_0_Layer",
            "params": [
                {
                    "name": "onlineResource",
                    "description": "- WMS online resource"
                },
                {
                    "name": "style",
                    "description": "- sld if defined else default server sld will be used"
                }
            ],
            "return": {
                "description": "ImageMapType - google.maps.ImageMapType"
            },
            "class": "CapdfWMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "line": 124,
            "description": "Method to decide how the wms should be rendered and add the wms to the map",
            "itemtype": "method",
            "name": "renderLayer",
            "params": [
                {
                    "name": "layername",
                    "description": "- Written to cater for the possible different layername in capdf"
                },
                {
                    "name": "layer",
                    "description": "- The layer containing the wms to be rendered"
                },
                {
                    "name": "param",
                    "description": "- OPTIONAL - parameter to be passed into retrieving the SLD."
                }
            ],
            "class": "CapdfWMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\CapdfWMSService.js",
            "line": 174,
            "description": "Method to decide how the wms csw record should be rendered and add the wms to the map",
            "itemtype": "method",
            "name": "renderCSWRecord",
            "params": [
                {
                    "name": "layer",
                    "description": "- The layer containing the wms to be rendered"
                },
                {
                    "name": "cswRecord",
                    "description": "- The cswRecord containing the wms to be rendered"
                }
            ],
            "class": "CapdfWMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 21,
            "description": "Look for img elements and add event handlers to them or timeout",
            "itemtype": "method",
            "name": "evaluateTiles",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                },
                {
                    "name": "onlineResource",
                    "description": "online resource object"
                },
                {
                    "name": "tilesLoaded",
                    "description": "is this being called after a 'tilesloaded' event?"
                }
            ],
            "return": {
                "description": "true if the timer should be cancelled"
            },
            "class": "WMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 73,
            "description": "Add layer to Google Map",
            "itemtype": "method",
            "name": "addLayerToGoogleMap",
            "params": [
                {
                    "name": "mapLayer",
                    "description": "Google mapLayer object"
                },
                {
                    "name": "layer",
                    "description": "layer object"
                },
                {
                    "name": "onlineResource",
                    "description": "online resource object"
                },
                {
                    "name": "style",
                    "description": "map style"
                }
            ],
            "class": "WMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 129,
            "description": "Hack to override the getTile function to gain access to the underlying tile <div>s to monitor progress of layer loading\nNote that 'getTile' is also called every time the map pans, resizes etc.",
            "class": "WMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 185,
            "description": "Method to decide how the wms should be rendered and add the wms to the map",
            "itemtype": "method",
            "name": "renderLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "- The layer containing the wms to be rendered"
                },
                {
                    "name": "param",
                    "description": "- OPTIONAL - parameter to be passed into retrieving the SLD."
                }
            ],
            "class": "WMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js",
            "line": 236,
            "description": "Method to decide how the wms csw record should be rendered and add the wms to the map",
            "itemtype": "method",
            "name": "renderCSWRecord",
            "params": [
                {
                    "name": "layer",
                    "description": "- The layer containing the wms to be rendered"
                },
                {
                    "name": "cswRecord",
                    "description": "- The cswRecord containing the wms to be rendered"
                }
            ],
            "class": "WMSService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_1_0_Service.js",
            "line": 13,
            "description": "Generate wms 1.1.1 google.maps.ImageMapType layer",
            "itemtype": "method",
            "name": "generateLayer",
            "params": [
                {
                    "name": "onlineResource",
                    "description": "- WMS online resource"
                },
                {
                    "name": "sld",
                    "description": "- sld if defined else default server sld will be used"
                },
                {
                    "name": "sldUrl",
                    "description": "- url to the sld file if the sld is too long"
                }
            ],
            "return": {
                "description": "ImageMapType - google.maps.ImageMapType"
            },
            "class": "WMS_1_1_0_Service",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMS_1_3_0_Service.js",
            "line": 10,
            "description": "Generate wms 1.3 google.maps.ImageMapType layer",
            "itemtype": "method",
            "name": "generateLayer",
            "params": [
                {
                    "name": "onlineResource",
                    "description": "- WMS online resource"
                },
                {
                    "name": "sld",
                    "description": "- sld if defined else default server sld will be used"
                },
                {
                    "name": "sldUrl",
                    "description": "- url to the sld file if the sld is too long"
                }
            ],
            "return": {
                "description": "ImageMapType - google.maps.ImageMapType"
            },
            "class": "WMS_1_3_0_Service",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderHandlerService.js",
            "line": 11,
            "description": "Decides how to renders a layer automatically",
            "itemtype": "method",
            "name": "renderLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer for rendering"
                }
            ],
            "class": "RenderHandlerService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderHandlerService.js",
            "line": 40,
            "description": "Decides how to renders a layer automatically",
            "itemtype": "method",
            "name": "renderCSWRecord",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer for rendering"
                },
                {
                    "name": "cswRecord",
                    "description": "- the cswRecord for rendering"
                }
            ],
            "class": "RenderHandlerService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 10,
            "itemtype": "method",
            "name": "getRenderStatus",
            "return": {
                "description": "renderStatus - a object that contains the status of the rendering"
            },
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 18,
            "description": "Set the total number of request, used in progress bar",
            "itemtype": "method",
            "name": "setMaxValue",
            "params": [
                {
                    "name": "layer",
                    "description": "- layer"
                },
                {
                    "name": "maxValue",
                    "description": "- the max value used in progress bar"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 33,
            "description": "capture and action on the status.update event.",
            "itemtype": "method",
            "name": "onUpdate",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 49,
            "description": "update the status of the rendering request",
            "itemtype": "method",
            "name": "updateCompleteStatus",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer"
                },
                {
                    "name": "resource",
                    "description": "- the resource"
                },
                {
                    "name": "status",
                    "description": "- Constants.statusProgress"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 86,
            "description": "Returns true if the status of the resource and layer matches the input status",
            "itemtype": "method",
            "name": "checkStatus",
            "params": [
                {
                    "name": "layer",
                    "description": "layer whose status will be checked"
                },
                {
                    "name": "resource",
                    "description": "resource whose status will be checked"
                },
                {
                    "name": "status",
                    "description": "boolean value of status to be checked"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 109,
            "description": "Clear the status when there is not use for it anymore or removed of layer.",
            "itemtype": "method",
            "name": "clearStatus",
            "params": [
                {
                    "name": "layerId",
                    "description": "- layerId"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\renderers\\RenderStatusService.js",
            "line": 119,
            "description": "Check if the layer is still active",
            "itemtype": "method",
            "name": "isLayerActive",
            "params": [
                {
                    "name": "layerId",
                    "description": "- layerId"
                }
            ],
            "class": "RenderStatusService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 25,
            "description": "Registers filter settings for a layer/markers that has just been added to map",
            "itemtype": "method",
            "name": "registerFilterSettings",
            "params": [
                {
                    "name": "filter",
                    "description": "filter object"
                },
                {
                    "name": "layerId",
                    "description": "layer id string"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 35,
            "description": "Deregisters filter (and opacity) settings for a layer/markers that has been deleted from map",
            "itemtype": "method",
            "name": "deregisterFilterSettings",
            "params": [
                {
                    "name": "layerId",
                    "description": "layer id string"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 45,
            "description": "Returns an object that contains the current states of all the filters",
            "itemtype": "method",
            "name": "getFilterState",
            "return": {
                "description": "An object, key: layer id string, value: filter state object , mandatoryFilters:{Obj}, opacity:0.0 .. 1.0|-1.0}",
                "type": "OptionalFilters: Obj"
            },
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 68,
            "description": "Registers the opacity value for a layer\nThis is called from the filter controller",
            "itemtype": "method",
            "name": "registerLayerOpacity",
            "params": [
                {
                    "name": "layerId",
                    "description": "layer id string"
                },
                {
                    "name": "opValue",
                    "description": "opacity value"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 79,
            "description": "FIXME: ??is this used??",
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 86,
            "description": "This function is used to register a function that will update the filter",
            "itemtype": "method",
            "name": "registerFilterUpdater",
            "params": [
                {
                    "name": "updateFn",
                    "description": "a function that will update the visible filter"
                },
                {
                    "name": "layerId",
                    "description": "layer id string"
                },
                {
                    "name": "lastOne",
                    "description": "is true if and only if this is the last filter to be registered"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 103,
            "description": "Used by a controller to register a callback function that will be called when the last filter has been registered",
            "itemtype": "method",
            "name": "registerIsReadyCB",
            "params": [
                {
                    "name": "lastFilterDoneFn",
                    "description": "function to be called when the last filter has been registered"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\FilterStateService.js",
            "line": 116,
            "description": "This calls the update function for a layer to update the visible part of the filter\nThis is called from the map service to setup the filters",
            "itemtype": "method",
            "name": "setFiltersState",
            "params": [
                {
                    "name": "filterState",
                    "description": "object that contains the state and layer id of the filter"
                }
            ],
            "class": "FilterStateService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 10,
            "description": "Retrieve WMS resource if available",
            "itemtype": "method",
            "name": "getWMS",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to extract wms from"
                }
            ],
            "return": {
                "description": "resources - an array of the wms resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 20,
            "description": "Retrieve WFS resource if available",
            "itemtype": "method",
            "name": "getWFS",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to extract wfs from"
                }
            ],
            "return": {
                "description": "resources - an array of the wfs resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 30,
            "description": "Retrieve WFS resource if available",
            "itemtype": "method",
            "name": "getWFSFromCSW",
            "params": [
                {
                    "name": "cswRecord",
                    "description": "- the cswRecord we would like to extract wfs from"
                }
            ],
            "return": {
                "description": "resources - an array of the wfs resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 40,
            "description": "Retrieve WFS resource if available",
            "itemtype": "method",
            "name": "getWFSFromCSW",
            "params": [
                {
                    "name": "cswRecord",
                    "description": "- the cswRecord we would like to extract wfs from"
                }
            ],
            "return": {
                "description": "resources - an array of the wfs resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 51,
            "description": "Retrieve the arrays of csw records from the layer",
            "itemtype": "method",
            "name": "getCSWRecords",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to extract cswRecords from"
                }
            ],
            "return": {
                "description": "cswRecords - an array of the cswRecords. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 61,
            "description": "Extract resources based on the type. If type is not defined, return all the resource",
            "itemtype": "method",
            "name": "getOnlineResources",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer we would like to extract cswRecords from"
                },
                {
                    "name": "resourceType",
                    "description": "- OPTIONAL a enum of the resource type. if not defined, it will return all resources The ENUM constant is defined on app.js"
                }
            ],
            "return": {
                "description": "resources - an array of the resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 92,
            "description": "Extract resources based on the type. If type is not defined, return all the resource",
            "itemtype": "method",
            "name": "getOnlineResourcesFromCSW",
            "params": [
                {
                    "name": "cswRecord",
                    "description": "- the cswRecord we would like to extract cswRecords from"
                },
                {
                    "name": "resourceType",
                    "description": "- OPTIONAL a enum of the resource type. The ENUM constant is defined on app.js"
                }
            ],
            "return": {
                "description": "resources - an array of the resource. empty array if none is found"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\layer\\LayerManagerService.js",
            "line": 117,
            "description": "Check if resource exist in the cswRecord",
            "itemtype": "method",
            "name": "CSWContainsResource",
            "params": [
                {
                    "name": "cswRecord",
                    "description": "- the cswRecord we would like to extract cswRecords from"
                },
                {
                    "name": "resource",
                    "description": "- the resource to match"
                }
            ],
            "return": {
                "description": "boolean - true if contain matching resource else false;"
            },
            "class": "LayerManagerService",
            "module": "layer"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 29,
            "description": "Get an instance of the map",
            "itemtype": "method",
            "name": "getMap",
            "return": {
                "description": "map - an instance of the map. Make sure this is called after map has been initialized"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 38,
            "description": "Register a function to call once the Google Map has been initialised\nIf the map has already been initialised, then the function is called \nimmediately",
            "itemtype": "method",
            "name": "getMapWhenReady",
            "params": [
                {
                    "name": "cb_fn",
                    "description": "callback function to be called"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 53,
            "description": "Return the current bounds of the map",
            "itemtype": "method",
            "name": "getCurrentViewPort",
            "return": {
                "description": "Bounds - the bounds of the view port."
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 62,
            "description": "Holds a array reference to the active markers on the map referenced by the layerId",
            "itemtype": "method",
            "name": "addMarkerToActive",
            "params": [
                {
                    "name": "layerId",
                    "description": "- layerId"
                },
                {
                    "name": "marker",
                    "description": "- the marker to add"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 77,
            "description": "Check if the layer is still active. This reuses RenderStatusService.isLayerActive. Alternatively you can check\nthis.activeLayers[layerId]",
            "itemtype": "method",
            "name": "isLayerActive",
            "params": [
                {
                    "name": "layer",
                    "description": "- layer"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 87,
            "description": "Overlay a heat map to the data set",
            "itemtype": "method",
            "name": "addHeatMapOverlay",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 109,
            "description": "remove the heatmap overlay",
            "itemtype": "method",
            "name": "removeHeatMapOverlay",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 121,
            "description": "Holds a array reference to the active layers on the map referenced by the layerId",
            "itemtype": "method",
            "name": "addLayerToActive",
            "params": [
                {
                    "name": "layer",
                    "description": "- layer"
                },
                {
                    "name": "mapLayer",
                    "description": "- the map layer to add"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 140,
            "description": "Synchronises data structures used to keep track of Google 'overlayMapType' layers",
            "itemtype": "method",
            "name": "syncOverlayMapDS",
            "return": {
                "description": "true if could synchronise"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 183,
            "description": "Searches for an 'overlayMap' within the current main map",
            "itemtype": "method",
            "name": "findOverlayMap",
            "params": [
                {
                    "name": "overlayMap",
                    "description": "Google 'overlayMap' to search for"
                }
            ],
            "return": {
                "description": "index to map, or -1 if not found"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 199,
            "description": "Searches for a Google 'overlayMap' within the active layers returning its layer id",
            "itemtype": "method",
            "name": "findLayerId",
            "params": [
                {
                    "name": "activeMap",
                    "description": "Google 'overlayMap' to search for"
                }
            ],
            "return": {
                "description": "layer id, string or \"\" if could not be found"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 216,
            "description": "Return the list of active layers",
            "itemtype": "method",
            "name": "getMapActiveLayer",
            "return": {
                "description": "activeLayers - the list of active layers"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 225,
            "description": "Given a layer and an opacity, set the opacity of the layer",
            "itemtype": "method",
            "name": "setLayerOpacity",
            "params": [
                {
                    "name": "layer",
                    "description": "- the layer whose opacity will be set"
                },
                {
                    "name": "opacity",
                    "description": "- opacity value"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 242,
            "description": "Remove the layer if it is rendered on the map",
            "itemtype": "method",
            "name": "removeActiveLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "- the csw layer to remove from map"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 281,
            "description": "Initialize the map",
            "itemtype": "method",
            "name": "initMap",
            "params": [
                {
                    "name": "mapDivId",
                    "description": "HTML id attribute of the <div> element where the map will be placed"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 314,
            "description": "Fetches the state of the map in the form of a JSON string",
            "itemtype": "method",
            "name": "getMapState",
            "return": {
                "description": "JSON string of map state"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 324,
            "description": "Sets the state of the map according to a JSON string",
            "itemtype": "method",
            "name": "setMapState",
            "params": [
                {
                    "name": "state",
                    "description": "JSON object of map state"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 338,
            "description": "Enable the drawing of rectangle and zooming to the area drawn",
            "itemtype": "method",
            "name": "zoomDraw",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 380,
            "description": "event for cancellation of the drawing of rectangle and zooming to the area drawn",
            "itemtype": "method",
            "name": "zoomDrawCancel",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 392,
            "description": "event to capture the start of the draw zoom event",
            "itemtype": "method",
            "name": "onDrawZoomStart",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 404,
            "description": "event to capture the end of the draw zoom event",
            "itemtype": "method",
            "name": "onDrawZoomEnd",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 417,
            "description": "Enable the drawing of bounding box for selecting data",
            "itemtype": "method",
            "name": "selectMapData",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 457,
            "description": "cancel the drawing of rectangle and data selection",
            "itemtype": "method",
            "name": "selectDataDrawCancel",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 468,
            "description": "event to capture the start of the data selection event",
            "itemtype": "method",
            "name": "onSelectDataStart",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 480,
            "description": "event to capture the end of the data selection event",
            "itemtype": "method",
            "name": "onSelectDataEnd",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 493,
            "description": "event to capture the removal of a layer",
            "itemtype": "method",
            "name": "onLayerRemoved",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 505,
            "description": "event to capture the adding of a layer",
            "itemtype": "method",
            "name": "onLayerAdded",
            "params": [
                {
                    "name": "$scope",
                    "description": "of the caller"
                },
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 517,
            "description": "Broadcasts an event to all listeners via $rootScope",
            "itemtype": "method",
            "name": "broadcast",
            "params": [
                {
                    "name": "event",
                    "description": "name of event (string)"
                },
                {
                    "name": "result",
                    "description": "arguments to be passed"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 527,
            "description": "Register a callback function belonging to the map controller that this service will call when told a busy period has started",
            "itemtype": "method",
            "name": "onBusyStart",
            "params": [
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 536,
            "description": "Register a callback function belonging to the map controller that this service will call when told that the busy period is over",
            "itemtype": "method",
            "name": "onBusyEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "- callback function"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 545,
            "description": "Function to set the map to busy, i.e. show a loading image",
            "itemtype": "method",
            "name": "busyStart",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 556,
            "description": "Function to stop the map being busy, i.e. stop showing a loading image",
            "itemtype": "method",
            "name": "busyEnd",
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 568,
            "description": "Moves layer to the front of the map layers",
            "itemtype": "method",
            "name": "moveLayerToFront",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\GoogleMapService.js",
            "line": 591,
            "description": "Returns true if a layer is at the front of the map layers",
            "itemtype": "method",
            "name": "isLayerAtFront",
            "params": [
                {
                    "name": "layer",
                    "description": "layer object"
                }
            ],
            "return": {
                "description": "true if the layer is at the front, or not an active layer"
            },
            "class": "GoogleMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 13,
            "description": "Retrieve knownlayer csw records async",
            "itemtype": "method",
            "name": "mapInit",
            "params": [
                {
                    "name": "reportName",
                    "description": "Name of the reports displayed in the preview map"
                },
                {
                    "name": "$scope",
                    "description": "The $scope variable of the controller instance which contains the map. This code assumes the \n       map config is stored in '$scope.map'"
                },
                {
                    "name": "reCentrePt",
                    "description": "By default draws map centred in middle of Australia, but a different centre can be specified\n       e.g.",
                    "type": "latitude: -34.5, longitude: 138"
                }
            ],
            "class": "PreviewMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 48,
            "description": "tile loaded event, adds the grey bounding boxes to show the effective range of the layers",
            "itemtype": "event",
            "name": "tilesloaded",
            "params": [
                {
                    "name": "map",
                    "description": ""
                }
            ],
            "class": "PreviewMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 76,
            "description": "If the user clicks on a bounding box in the preview map then the main map will zoom and pan to the box",
            "itemtype": "event",
            "name": "click",
            "class": "PreviewMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\map\\PreviewMapService.js",
            "line": 93,
            "itemtype": "method",
            "name": "setBBoxOptions",
            "params": [
                {
                    "name": "reportName",
                    "description": "Name of the reports displayed in the preview map"
                },
                {
                    "name": "adminArea",
                    "description": "Name of the region where the reports apply"
                },
                {
                    "name": "options",
                    "description": "Options used to style the bounding box (google.maps.Rectangle)\n       e.g.",
                    "type": "StrokeColor: '#CAFF06'"
                }
            ],
            "class": "PreviewMapService",
            "module": "map"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 9,
            "description": "Get rootnode from a gml string",
            "itemtype": "method",
            "name": "getRootNode",
            "params": [
                {
                    "name": "gml",
                    "description": "- GML String"
                }
            ],
            "return": {
                "description": "dom - the root node"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 20,
            "description": "create a point object",
            "itemtype": "method",
            "name": "createPoint",
            "params": [
                {
                    "name": "lat",
                    "description": "- latitude"
                },
                {
                    "name": "lon",
                    "description": "- longtitude"
                }
            ],
            "return": {
                "description": "point - point object"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 36,
            "description": "Create line string objects in a array",
            "itemtype": "method",
            "name": "generateCoordList",
            "params": [
                {
                    "name": "coordsAsString",
                    "description": "- The coordinates in a string from the feature gml"
                },
                {
                    "name": "srsName",
                    "description": "- the srs of the feature"
                }
            ],
            "return": {
                "description": "array - an array of points"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 56,
            "description": "Get the srs name",
            "itemtype": "method",
            "name": "getSrsName",
            "params": [
                {
                    "name": "node",
                    "description": "- coordinate node"
                }
            ],
            "return": {
                "description": "string - srs name"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 76,
            "description": "Forces lon/lat coords into coords (an array). Swaps coords[offset] and coords[offset + 1] if srsName requires it",
            "itemtype": "method",
            "name": "forceLonLat",
            "params": [
                {
                    "name": "coords",
                    "description": "- the coordinates"
                },
                {
                    "name": "srsName",
                    "description": "- the srs"
                },
                {
                    "name": "offset",
                    "description": "- offset the coord if required."
                }
            ],
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 103,
            "description": "Create line string objects in a array",
            "itemtype": "method",
            "name": "parseLineString",
            "params": [
                {
                    "name": "name",
                    "description": "- the name of the feature"
                },
                {
                    "name": "description",
                    "description": "- description of the feature"
                },
                {
                    "name": "lineStringNode",
                    "description": "- the coordinate node containing the linestring"
                }
            ],
            "return": {
                "description": "array - an array of points"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 137,
            "description": "Given a root placemark node attempt to parse it as a single point and return it. Returns a single portal.map.primitives.Polygon",
            "itemtype": "method",
            "name": "parsePolygon",
            "params": [
                {
                    "name": "name",
                    "description": "- the name of the feature"
                },
                {
                    "name": "description",
                    "description": "- description of the feature"
                },
                {
                    "name": "polygonNode",
                    "description": "- the coordinate node containing the polygonNode"
                }
            ],
            "return": {
                "description": "array - an array of points"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 173,
            "description": "Given a root placemark node attempt to parse it as a single point and return it.Returns a single portal.map.primitives.Marker",
            "itemtype": "method",
            "name": "parsePoint",
            "params": [
                {
                    "name": "name",
                    "description": "- the name of the feature"
                },
                {
                    "name": "description",
                    "description": "- description of the feature"
                },
                {
                    "name": "pointNode",
                    "description": "- the coordinate node containing the pointNode"
                },
                {
                    "name": "featureNode",
                    "description": "- the featureNode of the feature we are parsing"
                }
            ],
            "return": {
                "description": "point - a point"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 209,
            "description": "Returns the feature count as reported by the WFS response. Returns null if the count cannot be parsed.",
            "itemtype": "method",
            "name": "getFeatureCount",
            "params": [
                {
                    "name": "rootNode",
                    "description": "- rootNode"
                }
            ],
            "return": {
                "description": "Number - the feature count"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\GMLParserService.js",
            "line": 229,
            "description": "Top level function  that organize how the gml should be parsed",
            "itemtype": "method",
            "name": "makePrimitives",
            "params": [
                {
                    "name": "rootNode",
                    "description": "- the root node of the gml"
                }
            ],
            "return": {
                "description": "Array - can be anything from a single point to a array for polygons and line string:",
                "type": "!~YUIDOC_LINE~!           name : name,!~YUIDOC_LINE~!           description: description,!~YUIDOC_LINE~!           srsName:srsName,!~YUIDOC_LINE~!           coords: point,!~YUIDOC_LINE~!           geometryType : Constants.geometryType.POINT!~YUIDOC_LINE~!"
            },
            "class": "GMLParserService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 9,
            "description": "A wrapper around the DOM defined Document.evaluate function\nBecause not every browser supports document.evaluate we need to have a pure javascript\nbackup in place",
            "itemtype": "method",
            "name": "evaluateXPath",
            "params": [
                {
                    "name": "document",
                    "description": "- document"
                },
                {
                    "name": "domNode",
                    "description": "- domNode"
                },
                {
                    "name": "xPath",
                    "description": "- xPath"
                },
                {
                    "name": "resultType",
                    "description": "- https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate#Result_types"
                }
            ],
            "return": {
                "description": "dom - the dom result"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 85,
            "description": "Evaluates an XPath which will return an array of W3C DOM nodes",
            "itemtype": "method",
            "name": "evaluateXPathNodeArray",
            "params": [
                {
                    "name": "domNode",
                    "description": "- domNode"
                },
                {
                    "name": "xPath",
                    "description": "- xPath"
                }
            ],
            "return": {
                "description": "dom - the dom result"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 128,
            "description": "Utility for retrieving a W3C DOM Node 'localName' attribute across browsers.\nThe localName is the node name without any namespace prefixes",
            "itemtype": "method",
            "name": "getNodeLocalName",
            "params": [
                {
                    "name": "domNode",
                    "description": "- domNode"
                }
            ],
            "return": {
                "description": "String - local name of the node or empty string upon error"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 141,
            "description": "Returns the set of classes this node belongs to as an array of strings",
            "itemtype": "method",
            "name": "getClassList",
            "params": [
                {
                    "name": "domNode",
                    "description": "- domNode"
                }
            ],
            "return": {
                "description": "dom - the dom result"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 158,
            "description": "Figure out if domNode is a leaf or not\n(Leaves have no nodes from XML_NODE_ELEMENT)",
            "itemtype": "method",
            "name": "isLeafNode",
            "params": [
                {
                    "name": "domNode",
                    "description": "- domNode"
                }
            ],
            "return": {
                "description": "boolean - is leaf or not"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 175,
            "description": "Filters an array of DOM Nodes according to the specified parameters",
            "itemtype": "method",
            "name": "filterNodeArray",
            "params": [
                {
                    "name": "nodeArray",
                    "description": "An Array of DOM Nodes"
                },
                {
                    "name": "nodeType",
                    "description": "[Optional] An integer node type"
                },
                {
                    "name": "namespaceUri",
                    "description": "[Optional] String to compare against node namespaceURI"
                },
                {
                    "name": "nodeName",
                    "description": "[Optional] String to compare against the node localName"
                }
            ],
            "return": {
                "description": "dom - return the result in a dom"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 207,
            "description": "Gets all children of domNode as an Array that match the specified filter parameters",
            "itemtype": "method",
            "name": "getMatchingChildNodes",
            "params": [
                {
                    "name": "childNamespaceURI",
                    "description": "[Optional] The URI to lookup as a String"
                },
                {
                    "name": "childNodeName",
                    "description": "[Optional] The node name to lookup as a String"
                }
            ],
            "return": {
                "description": "dom - return the result in a dom"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 218,
            "description": "Gets all Attributes of domNode as an Array that match the specified filter parameters",
            "itemtype": "method",
            "name": "getMatchingAttributes",
            "params": [
                {
                    "name": "childNamespaceURI",
                    "description": "[Optional] The URI to lookup as a String"
                },
                {
                    "name": "childNodeName",
                    "description": "[Optional] The node name to lookup as a String"
                }
            ],
            "return": {
                "description": "dom - return the result in a dom or null upon error"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 234,
            "description": "Given a DOM node, return its text content (however the browser defines it)",
            "itemtype": "method",
            "name": "getNodeTextContent",
            "params": [
                {
                    "name": "domNode",
                    "description": "- domNode"
                }
            ],
            "return": {
                "description": "string - text content"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\SimpleXMLService.js",
            "line": 246,
            "description": "Parse string to DOM",
            "itemtype": "method",
            "name": "parseStringToDOM",
            "params": [
                {
                    "name": "xmlString",
                    "description": "- xml string"
                }
            ],
            "return": {
                "description": "dom - return the result in a dom"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 11,
            "description": "Test if string s contains c",
            "itemtype": "method",
            "name": "stringContains",
            "params": [
                {
                    "name": "s",
                    "description": "- the string to check"
                },
                {
                    "name": "c",
                    "description": "- the string to match"
                }
            ],
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 21,
            "description": "Returns the parameter in a get url request",
            "itemtype": "method",
            "name": "getUrlParameters",
            "params": [
                {
                    "name": "url",
                    "description": "- the get url string to break"
                },
                {
                    "name": "options",
                    "description": "- splitArgs -  Split comma delimited params into arrays? Default is true",
                    "type": "Boolean"
                }
            ],
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 84,
            "description": "Test if the object is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "obj",
                    "description": "- the object to test for emptiness"
                }
            ],
            "return": {
                "description": "boolean - true if object is empty."
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 104,
            "description": "Test if the object is a number",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "obj",
                    "description": "- the object to test for numeric value"
                }
            ],
            "retun": "boolean - true if obj is a number",
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 114,
            "description": "Extract the domain from any url",
            "itemtype": "method",
            "name": "getUrlDomain",
            "params": [
                {
                    "name": "url",
                    "description": "to extract the domain"
                }
            ],
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 125,
            "description": "Based on the filter parameter, this is a utility to decide if we should skip this provider",
            "itemtype": "method",
            "name": "filterProviderSkip",
            "params": [
                {
                    "name": "params",
                    "description": "- filter parameter"
                },
                {
                    "name": "url",
                    "description": "- the url of the resource we are matching"
                }
            ],
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 154,
            "description": "count the number of unique urls in onlineResources",
            "itemtype": "method",
            "name": "uniqueCountOfResourceByUrl",
            "params": [
                {
                    "name": "onlineResources",
                    "description": ""
                }
            ],
            "return": {
                "description": "unique count by url"
            },
            "class": "SimpleXPathService",
            "module": "utility"
        },
        {
            "file": "..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js",
            "line": 172,
            "description": "Base64 encode / decode\n  http://www.webtoolkit.info/",
            "class": "SimpleXPathService",
            "module": "utility"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:198"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:239"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:254"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:271"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:292"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:352"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:363"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:437"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:462"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:472"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:495"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:519"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:540"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:593"
        },
        {
            "message": "unknown tag: api",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:609"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\js\\assets\\modules\\service\\http\\StyleService.js:9"
        },
        {
            "message": "unknown tag: datasetid",
            "line": " ..\\js\\assets\\modules\\service\\layer\\queriers\\NVCLService.js:39"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\js\\assets\\modules\\service\\map\\GoogleMapService.js:199"
        },
        {
            "message": "unknown tag: retun",
            "line": " ..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js:104"
        },
        {
            "message": "Missing item type\nThis is the web browser implementation of `debug()`.\n\nExpose `debug()` as the module.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:141"
        },
        {
            "message": "Missing item type\nColors.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:158"
        },
        {
            "message": "Missing item type\nCurrently only WebKit-based Web Inspectors, Firefox >= v31,\nand the Firebug extension (any Firefox version) are known\nto support \"%c\" CSS customizations.\n\nTODO: add a `localStorage` variable to explicitly enable/disable colors",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:171"
        },
        {
            "message": "Missing item type\nMap %j to `JSON.stringify()`, since no Web Inspectors do that by default.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:189"
        },
        {
            "message": "Missing item type\nColorize log arguments if enabled.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:198"
        },
        {
            "message": "Missing item type\nInvokes `console.log()` when available.\nNo-op when `console.log` is not a \"function\".",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:239"
        },
        {
            "message": "Missing item type\nSave `namespaces`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:254"
        },
        {
            "message": "Missing item type\nLoad `namespaces`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:271"
        },
        {
            "message": "Missing item type\nEnable namespaces listed in `localStorage.debug` initially.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:286"
        },
        {
            "message": "Missing item type\nLocalstorage attempts to return the localstorage.\n\nThis is necessary because safari throws\nwhen a user disables cookies/localstorage\nand you attempt to access it.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:292"
        },
        {
            "message": "Missing item type\nThis is the common logic for both the Node.js and web browser\nimplementations of `debug()`.\n\nExpose `debug()` as the module.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:311"
        },
        {
            "message": "Missing item type\nThe currently active debug mode names, and names to skip.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:325"
        },
        {
            "message": "Missing item type\nMap of special \"%n\" handling functions, for the debug \"format\" argument.\n\nValid key names are a single, lowercased letter, i.e. \"n\".",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:332"
        },
        {
            "message": "Missing item type\nPreviously assigned color.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:340"
        },
        {
            "message": "Missing item type\nPrevious log timestamp.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:346"
        },
        {
            "message": "Missing item type\nSelect a color.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:352"
        },
        {
            "message": "Missing item type\nCreate a debugger with the given `namespace`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:363"
        },
        {
            "message": "Missing item type\nEnables a debug mode by namespaces. This can include modes\nseparated by a colon and wildcards.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:437"
        },
        {
            "message": "Missing item type\nDisable debug output.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:462"
        },
        {
            "message": "Missing item type\nReturns true if the given mode name is enabled, false otherwise.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:472"
        },
        {
            "message": "Missing item type\nCoerce `val`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:495"
        },
        {
            "message": "Missing item type\nHelpers.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:509"
        },
        {
            "message": "Missing item type\nParse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:519"
        },
        {
            "message": "Missing item type\nParse the given `str` and return milliseconds.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:540"
        },
        {
            "message": "Missing item type\nShort format for `ms`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:593"
        },
        {
            "message": "Missing item type\nLong format for `ms`.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:609"
        },
        {
            "message": "Missing item type\nPluralization helper.",
            "line": " ..\\js\\assets\\framework\\angular\\angular-simple-logger.js:625"
        },
        {
            "message": "Missing item type\nWorkaround for the lack of having an XPath parser on safari\nIt works on Safari's document and XMLDocument object.\n\nIt doesn't support the full XPath spec, but just enought for\nthe skinning engine which needs XPath on the HTML document.\n\nSupports:\n- Compilation of xpath statements\n- Caching of XPath statements",
            "line": " ..\\js\\assets\\framework\\javeline\\javeline_xpath.js:1"
        },
        {
            "message": "Missing item type\ntry to load the image 3 times,\nleave a slight delay so we don't get\nservers blocking the request.",
            "line": " ..\\js\\assets\\framework\\slick\\slick.js:1672"
        },
        {
            "message": "Missing item type\naccepts arguments in format of:\n\n - for changing a single option's value:\n    .slick(\"setOption\", option, value, refresh )\n\n - for changing a set of responsive options:\n    .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n\n - for updating multiple values at once (not responsive)\n    .slick(\"setOption\", { 'option': value, ... }, refresh )",
            "line": " ..\\js\\assets\\framework\\slick\\slick.js:1999"
        },
        {
            "message": "Missing item type\nClear the div of any graph plotting",
            "line": " ..\\js\\assets\\modules\\service\\analytic\\D3PlotService.js:358"
        },
        {
            "message": "Missing item type\nHack to override the getTile function to gain access to the underlying tile <div>s to monitor progress of layer loading\nNote that 'getTile' is also called every time the map pans, resizes etc.",
            "line": " ..\\js\\assets\\modules\\service\\layer\\renderers\\wms\\WMSService.js:129"
        },
        {
            "message": "Missing item type\nFIXME: ??is this used??",
            "line": " ..\\js\\assets\\modules\\service\\layer\\FilterStateService.js:79"
        },
        {
            "message": "Missing item type\nBase64 encode / decode\n  http://www.webtoolkit.info/",
            "line": " ..\\js\\assets\\modules\\service\\utility\\UtilitiesService.js:172"
        }
    ]
}